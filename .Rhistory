BC_eco <- downloadFile(targetFile = "ERC_ECOPRO_polygon.shp",
archive = "ERC_ECOPROVINCES_SP.zip",
url = "https://drive.google.com/open?id=1TrAMT5WBs4yyQXH3EL9LuRmuTLS7BPEc",
overwrite = TRUE,
neededFiles = "ERC_ECOPRO_Polygon.shp", checkSums = NA)
library(shiny)
library(raster)
library(sp)
require(reproducible)
BC_eco <- prepInputs(targetFile = "ERC_ECOPRO_polygon.shp",
archive = "ERC_ECOPROVINCES_SP.zip",
url = "https://drive.google.com/open?id=1TrAMT5WBs4yyQXH3EL9LuRmuTLS7BPEc",
overwrite = TRUE)
filepath <- file.path(tempdir(), "scratch")
BC_eco <- prepInputs(targetFile = file.path(filepath, "ERC_ECOPRO_polygon.shp"),
url = "https://drive.google.com/open?id=1TrAMT5WBs4yyQXH3EL9LuRmuTLS7BPEc",
destinationPath = filepath,
overwrite = TRUE)
#This takes some time, points are slow. Kick back
fires <- prepInputs(targetFile = file.path(filepath, "NFDB_FirePoints.shp"),
destinationPath = filepath,
url = "https://drive.google.com/open?id=1KqN3t8Xma7oIOzNi4UsCamnGI_vbY7Qt",
studyArea = BC_eco,
useSAcrs = TRUE,
overwrite = TRUE)
#This takes time
fires <- prepInputs(targetFile = file.path(filepath, "NFDB_FirePoints.shp"),
destinationPath = filepath,
url = "https://drive.google.com/open?id=1KqN3t8Xma7oIOzNi4UsCamnGI_vbY7Qt",
overwrite = TRUE)
tempdir()
#This takes time
fires <- prepInputs(targetFile = file.path(filepath, "NFDB_FirePoints.shp"),
destinationPath = filepath,
url = "https://drive.google.com/open?id=1KqN3t8Xma7oIOzNi4UsCamnGI_vbY7Qt",
overwrite = TRUE,
useCache = TRUE)
test <- shapefile(file.path(tempdir, "scratch", NFDB_FirePoints.shp"))
d
d
w
""
test <- shapefile(file.path(tempdir(), "scratch","NFDB_FirePoints.shp"))
fires <- download.file(url = "https://drive.google.com/open?id=1KqN3t8Xma7oIOzNi4UsCamnGI_vbY7Qt",destfile = filepath, quiet = TRUE)
fires <- download.file(url = "https://drive.google.com/open?id=1KqN3t8Xma7oIOzNi4UsCamnGI_vbY7Qt",
destfile = filepath,
quiet = TRUE)
fires <- download.file(url = "https://drive.google.com/open?id=1KqN3t8Xma7oIOzNi4UsCamnGI_vbY7Qt",
destfile = filepath,
quiet = TRUE)
fires <- download.file(url = "https://drive.google.com/open?id=1KqN3t8Xma7oIOzNi4UsCamnGI_vbY7Qt",
destfile = "C:/Ian/Data/squiggles",
quiet = TRUE)
fires <- download.file(url = "https://drive.google.com/open?id=1KqN3t8Xma7oIOzNi4UsCamnGI_vbY7Qt",
destfile = filepath,
quiet = TRUE)
fires <- download.file(url = "https://drive.google.com/open?id=1KqN3t8Xma7oIOzNi4UsCamnGI_vbY7Qt",
destfile = file.path(filepath, "fires"),
quiet = TRUE)
fires <- download.file(url = "https://drive.google.com/open?id=1KqN3t8Xma7oIOzNi4UsCamnGI_vbY7Qt",
destfile = file.path(filepath, "fires"),
quiet = TRUE) %>%
unzip(zipfile = ., exdir = file.path(filepath, "temp"))
fires <- download.file(url = "https://drive.google.com/open?id=1KqN3t8Xma7oIOzNi4UsCamnGI_vbY7Qt",
destfile = file.path(filepath, "fires"),
quiet = TRUE) %>%
unzip(zipfile = fires, exdir = file.path(filepath, "temp"))
fires1 <- unzip(zipfile = file.path(filepath, "fires"), unzip = TRUE)
fires1 <- unzip(zipfile = file.path(filepath, "fires"))
fires.zip <- download.file(url = "https://drive.google.com/open?id=1KqN3t8Xma7oIOzNi4UsCamnGI_vbY7Qt",
destfile = file.path(filepath, "fires"),
quiet = TRUE)
test <- shapefile(file.path(filepath, "NFDB_FirePoints.shp"))
#This takes time
fires <- prepInputs(targetFile = file.path(filepath, "NFDB_FirePoints.shp"),
destinationPath = filepath,
url = "https://drive.google.com/open?id=1KqN3t8Xma7oIOzNi4UsCamnGI_vbY7Qt",
overwrite = TRUE,
useCache = TRUE,
alsoExtract = 'similar')
#This takes time
fires <- prepInputs(targetFile = file.path(filepath, "NFDB_FirePoints.shp"),
destinationPath = filepath,
url = "https://drive.google.com/open?id=1KqN3t8Xma7oIOzNi4UsCamnGI_vbY7Qt",
overwrite = TRUE,
useCache = TRUE,
alsoExtract = 'similar')
rm(fires.zip, fires1)
crs(fires)
crs(BC_ecO)
crs(BC_eco)
#This takes time
fires <- prepInputs(targetFile = file.path(filepath, "NFDB_FirePoints.shp"),
destinationPath = filepath,
url = "https://drive.google.com/open?id=1KqN3t8Xma7oIOzNi4UsCamnGI_vbY7Qt",
overwrite = TRUE,
useCache = TRUE,
useSAcrs = TRUE,
alsoExtract = 'similar')
crs(fires)
crs(BC_eco)
library(shiny)
require(raster)
require(sp)
require(reproducible)
filepath <- file.path(tempdir(), "scratch")
BC_eco <- prepInputs(targetFile = file.path(filepath, "ERC_ECOPRO_polygon.shp"),
url = "https://drive.google.com/open?id=1TrAMT5WBs4yyQXH3EL9LuRmuTLS7BPEc",
destinationPath = filepath,
overwrite = TRUE)
#This takes time
fires <- prepInputs(targetFile = file.path(filepath, "NFDB_FirePoints.shp"),
destinationPath = filepath,
url = "https://drive.google.com/open?id=1KqN3t8Xma7oIOzNi4UsCamnGI_vbY7Qt",
overwrite = TRUE,
useCache = TRUE,
useSAcrs = TRUE,
alsoExtract = 'similar')
crs(fires)
crs(BC_eco)
fires <- spTransform(fires, CRSobj = crs(BC_eco))
fires <- fires[fires$SIZE_HA > 1,]
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Fire Size Distribution by Ecoregion"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("Ecoprovince",label = c("Select an Ecoprovince"),
choices = c("SOUTHERN ALASKA MOUNTAINS","NORTHERN BOREAL MOUNTAINS","TAIGA PLAINS",
"BOREAL PLAINS","SUB-BOREAL INTERIOR","SOUTHERN INTERIOR MOUNTAINS",
"SOUTHERN INTERIOR","COAST AND MOUNTAINS","GEORGIA DEPRESSION",
"NORTHEAST PACIFIC","CENTRAL INTERIOR"),selected = "GEORGIA DEPRESSION")
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId = "GISPlot"),
plotOutput(outputId = "distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$GISPlot <- renderPlot({
# Plot(BC_select, title = paste(input$EcoProvince))
BC_select <- BC_eco[BC_eco$CPRVNCNM == input$Ecoprovince,]
fireSelect <- intersect(x = fires, y = BC_select)
fireSelect <- fireSelect[!is.na(fireSelect$SIZE_HA),] #remove NA
plot(BC_select)
plot(fireSelect, add = TRUE, col = "red", pch = 20, cex = 1)
})
output$distPlot <- renderPlot({
BC_select <- BC_eco[BC_eco$CPRVNCNM == input$Ecoprovince,]
fireSelect <- intersect(x = fires, y = BC_select)
fireSelect <- fireSelect[!is.na(fireSelect$SIZE_HA),] #remove NA
if (length(fireSelect) > 1) {
hist(log(fireSelect$SIZE_HA), main = "1950-2017 fire distribution (1 ha min.)", xlab = "log of fire size (ha)")
}
else{
hist(0, main = "no fires")
}
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(data.table)
library(fasterize)
library(reproducible)
library(raster)
library(magrittr)
# #I seperated the data after 1960 because some climateNA runs were failing.
# #Turns out this was a problem with scenario1. Not sure re: other scenarios,
# #But running with the data split into two CSVs was a simple workaround.
# climFiles <- list.files(path = "data/climateNA_out/", full.names = TRUE)
# climFilesA <- list.files(path = "data/climateNA_outA/", full.names = TRUE)
# climFilesB <- list.files(path = "data/climateNA_outB/", full.names = TRUE)
#
# climMain <- lapply(X = climFiles, fread) %>%
#   rbindlist(.)
#
# climMainA <- lapply(climFilesA, fread) %>%
#   rbindlist(.)
#
# climMainB <- lapply(climFilesB, fread) %>%
#   rbindlist(.)
#
# climData <- rbind(climMain, climMainA, climMainB)
# climData[, ID2 := NULL]
#
# saveRDS(climData, file = "data/climateNA10km_2011-2100")
dPath <- "C:/Ian/Data/climateNA/CanadaWide"
climData <- prepInputs(targetFile = file.path(dPath, "climateNA10km_2011-2100.RData"),
url = "https://drive.google.com/open?id=1KKdZjK3R1O6nhTGII7ZoogS8UTgxrNJN",
destinationPath = dPath,
fun = "readRDS",
overwrite = TRUE, purge = 7)
origRaster <- prepInputs(targetFile = file.path(dPath, "Hydro1_resample10Km.tif"),
archive = "Hydro1_res10kmDEM_CA.zip",
destinationPath = dPath,
overwrite = TRUE,
url = "https://drive.google.com/open?id=1KscOrWsERyM8kmW5k39oTIbhEB2A5VpY")
makeRas <- function(x, df, ras, climField){
df <- df[df$year == x,]
browser()
temp <- rasterFromXYZ(xyz = df)
if (climField == "MAT"){
climPt$MAT <- climPt$MAT/1000
}
outRas <- rasterize(climSpat, ras, field = climPt$CMD, filename = file.path(dPath,paste0(climField, x, ".tif")),
overwrite = TRUE, datatype = "INT2U")
return(outRas)
}
outMAT <- lapply(sort(unique(climData$year)), makeRas, df = climData, ras = origRaster, climField = "CMD")
df_coords <- cbind(df$Longitude, df$Latitude)
df_pts <- SpatialPointsDataFrame(coords = df_coords, data = data.frame(df$df))
makeRas <- function(x, df, ras, climField){
df <- df[df$year == x,]
browser()
df_coords <- cbind(df$Longitude, df$Latitude)
df_pts <- SpatialPointsDataFrame(coords = df_coords, data = data.frame(df$df))
if (climField == "MAT"){
climPt$MAT <- climPt$MAT/1000
}
outRas <- rasterize(climSpat, ras, field = climPt$CMD, filename = file.path(dPath,paste0(climField, x, ".tif")),
overwrite = TRUE, datatype = "INT2U")
return(outRas)
}
outMAT <- lapply(sort(unique(climData$year)), makeRas, df = climData, ras = origRaster, climField = "CMD")
df_coords <- cbind(df$Longitude, df$Latitude)
df_pts <- SpatialPointsDataFrame(coords = df_coords, data = data.frame(df))
if (df_pts == "MAT"){
df_pts <- climPt$MAT/1000
}
if (climField == "MAT"){
df_pts$CMD <- df_pts$MAT/1000
}
cellSize <- res(ras)
rasExtent <- extent(df_pts)
rasExtent
ncols <- (xmax(df_pts) - xmin(df_pts))/cellSize + 1
xmax(df_pts
myExtent <- extent(df_pts)
myExtent <- extent(df_pts)
ras
ras <- raster::project(ras, crs = "+init=epsg:4326 +proj=longlat
+ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
ras <- raster::projectRaster(ras, crs = "+init=epsg:4326 +proj=longlat
+ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
ras <- raster::projectRaster(ras, crs = "+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
ras
plot(ras)
tempGrid <- raster(crs = crs(df_pts), ext = extent(df_pts), res = res(ras))
tempGrid
crs(df_pts)
crs(df_pts) <- "+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
ras <- raster::projectRaster(ras, crs = "+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0")
ras
plot(ras)
tempGrid <- raster(crs = crs(df_pts), ext = extent(df_pts), res = res(ras))
tempGrid
outRas <- rasterize(climSpat, ras, field = climPt$CMD, filename = file.path(dPath,paste0(climField, x, ".tif")),
overwrite = TRUE, datatype = "INT2U")
outRas <- rasterize(df_pts, ras, field = climField, filename = file.path(dPath,paste0(climField, x, ".tif")),
overwrite = TRUE, datatype = "INT2U")
outRas
plot(outRas)
plot(df_pts)
class(df_pts)
writeOGR(df_pts, "C:/Ian/", "testPoints", driver = "ESRI Shapefile")
rgeos::writeOGR(df_pts, "C:/Ian/", "testPoints", driver = "ESRI Shapefile")
rgdal::writeOGR(df_pts, "C:/Ian/", "testPoints", driver = "ESRI Shapefile")
rgdal::writeOGR(df_pts, "C:/Ian", "testPoints", driver = "ESRI Shapefile")
outMAT <- lapply(sort(unique(climData$year)), makeRas, df = climData, ras = origRaster, climField = "CMD")
makeRas <- function(x, df, ras, climField){
df <- df[df$year == x,]
browser()
df_coords <- cbind(df$Longitude, df$Latitude)
df_pts <- SpatialPointsDataFrame(coords = df_coords, data = data.frame(df))
df_pts <- spTransform(df_pts, CRSobj = crs(ras))
myExtent <- extent(df_pts)
tempGrid <- raster(crs = crs(df_pts), ext = extent(df_pts), res = res(ras))
outRas <- rasterize(df_pts, ras, field = climField, filename = file.path(dPath,paste0(climField, x, ".tif")),
overwrite = TRUE, datatype = "INT2U")
return(outRas)
}
outMAT <- lapply(sort(unique(climData$year)), makeRas, df = climData, ras = origRaster, climField = "CMD")
crs(origRaster)
outMAT <- lapply(sort(unique(climData$year)), makeRas, df = climData, ras = origRaster, climField = "CMD")
crs(ras)
df_pts <- spTransform(df_pts, CRSobj = crs(ras))
crs(ras)
CRS(ras)
ras@crs
crs(df_pts)
plot(df_pts)
dfpt <- df_pts
crs(dfpt) <- crs(ras)
plot(dfpt)
Plot(dfpt)
library(quickPlot)
Plot(dfpt)
Plot(dfpt)
makeRas <- function(x, df, ras, climField){
df <- df[df$year == x,]
browser()
df_coords <- cbind(df$Longitude, df$Latitude)
df_pts <- SpatialPointsDataFrame(coords = df_coords, data = data.frame(df))
crs(df_pts) <- "+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
df_pts <- spTransform(df_pts, CRSobj = crs(ras))
myExtent <- extent(df_pts)
tempGrid <- raster(crs = crs(df_pts), ext = extent(df_pts), res = res(ras))
outRas <- rasterize(df_pts, ras, field = climField, filename = file.path(dPath,paste0(climField, x, ".tif")),
overwrite = TRUE, datatype = "INT2U")
return(outRas)
}
outMAT <- lapply(sort(unique(climData$year)), makeRas, df = climData, ras = origRaster, climField = "CMD")
outRas
plot(outRas)
makeRas <- function(x, df, ras, climField){
df <- df[df$year == x,]
df_coords <- cbind(df$Longitude, df$Latitude)
df_pts <- SpatialPointsDataFrame(coords = df_coords, data = data.frame(df))
crs(df_pts) <- "+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
df_pts <- spTransform(df_pts, CRSobj = crs(ras))
myExtent <- extent(df_pts)
tempGrid <- raster(crs = crs(df_pts), ext = extent(df_pts), res = res(ras))
outRas <- rasterize(df_pts, ras, field = climField, filename = file.path(dPath,paste0(climField, x, ".tif")),
overwrite = TRUE, datatype = "INT2U")
return(outRas)
}
outMAT <- lapply(sort(unique(climData$year)), makeRas, df = climData, ras = origRaster, climField = "CMD")
test <- raster(outMat[[30]])
test <- raster(outMAT[[30]])
plot(test)
outMAT
temp <- outMAT[[50]]
temp
plot(temp)
outATA <- lapply(sort(unique(climData$year)), makeRas, df = climData, ras = origRaster, climField = "ATA")
outATA <- lapply(sort(unique(climData$year)), makeRas, df = climData, ras = origRaster, climField = "MAT")
meanMAT1950_1980 <- read.csv("C:/Ian/Data/ClimateNA/climateNAinput_10km_Normal_1951_1980Y.csv")
meanMAT1981_2010 <- read.csv("C:/Ian/Data/ClimateNA/climateNAinput_10km_Normal_1981_2010Y.csv")
meanMAT <- mean(meanMAT1950_1980$MAT, meanMAT1981_2010$MAT)
meaMAT <- cbind(meanMAT1950_1980[1:6], meanMAT1981_2010[6])
meaMAT
meanMAT <- cbind(meanMAT1950_1980[1:6], meanMAT1981_2010[6])
meanMAT <- cbind(meanMAT1950_1980[1:6], meanMAT1981_2010[6])
dim(meanMAT)
meanMAT$normalMAT <- (meanMAT[6,] + meanMAT[7,])/2
meanMAT$normalMAT <- (meanMAT[6] + meanMAT[7])/2
meanMAT$normalMAT
summary(meanMAT)
outATA <- lapply(sort(unique(climData$year)), makeRas, df = climData, ras = origRaster, climField = "ATA")
makeRas <- function(x, df, ras, climField, MAT = meanMAT){
df <- df[df$year == x,]
if (climField == 'ATA') {
df$ATA <- (df$MAT - MAT$normalMAT) * 1000
}
df_coords <- cbind(df$Longitude, df$Latitude)
df_pts <- SpatialPointsDataFrame(coords = df_coords, data = data.frame(df))
crs(df_pts) <- "+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
df_pts <- spTransform(df_pts, CRSobj = crs(ras))
browser()
myExtent <- extent(df_pts)
tempGrid <- raster(crs = crs(df_pts), ext = extent(df_pts), res = res(ras))
outRas <- rasterize(df_pts, ras, field = climField, filename = file.path(dPath,paste0(climField, x, ".tif")),
overwrite = TRUE, datatype = "INT2U")
return(outRas)
}
outATA <- lapply(sort(unique(climData$year)), makeRas, df = climData, ras = origRaster, climField = "ATA")
df$ATA
makeRas <- function(x, df, ras, climField, MAT = meanMAT){
df <- df[df$year == x,]
if (climField == 'ATA') {
df$ATA <- (df$MAT - MAT$normalMAT) * 1000
}
df_coords <- cbind(df$Longitude, df$Latitude)
df_pts <- SpatialPointsDataFrame(coords = df_coords, data = data.frame(df))
crs(df_pts) <- "+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
df_pts <- spTransform(df_pts, CRSobj = crs(ras))
browser()
myExtent <- extent(df_pts)
tempGrid <- raster(crs = crs(df_pts), ext = extent(df_pts), res = res(ras))
outRas <- rasterize(df_pts, ras, field = climField, filename = file.path(dPath,paste0(climField, x, ".tif")),
overwrite = TRUE, datatype = "INT2U")
return(outRas)
}
outATA <- lapply(sort(unique(climData$year)), makeRas, df = climData, ras = origRaster, climField = "ATA")
makeRas <- function(x, df, ras, climField, MAT = meanMAT){
df <- df[df$year == x,]
if (climField == 'ATA') {
df$ATA <- (df$MAT - MAT$normalMAT) * 1000
}
df_coords <- cbind(df$Longitude, df$Latitude)
df_pts <- SpatialPointsDataFrame(coords = df_coords, data = data.frame(df))
crs(df_pts) <- "+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
df_pts <- spTransform(df_pts, CRSobj = crs(ras))
myExtent <- extent(df_pts)
tempGrid <- raster(crs = crs(df_pts), ext = extent(df_pts), res = res(ras))
outRas <- rasterize(df_pts, ras, field = climField, filename = file.path(dPath,paste0(climField, x, ".tif")),
overwrite = TRUE, datatype = "INT2U")
return(outRas)
}
outATA <- lapply(sort(unique(climData$year)), makeRas, df = climData, ras = origRaster, climField = "ATA")
temp2 <- outATA[[50]]
plot(temp2)
makeRas <- function(x, df, ras, climField, MAT = meanMAT){
df <- df[df$year == x,]
if (climField == 'ATA') {
df$ATA <- (df$MAT - MAT$normalMAT) * 1000
}
df_coords <- cbind(df$Longitude, df$Latitude)
df_pts <- SpatialPointsDataFrame(coords = df_coords, data = data.frame(df))
crs(df_pts) <- "+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
df_pts <- spTransform(df_pts, CRSobj = crs(ras))
browser()
myExtent <- extent(df_pts)
tempGrid <- raster(crs = crs(df_pts), ext = extent(df_pts), res = res(ras))
outRas <- rasterize(df_pts, ras, field = climField, filename = file.path(dPath,paste0(climField, x, ".tif")),
overwrite = TRUE, datatype = "INT2U")
return(outRas)
}
outCMD <- lapply(sort(unique(climData$year)), makeRas, df = climData, ras = origRaster, climField = "CMD")
year <- 2050
makeRas <- function(x, df, ras, climField, MAT = meanMAT){
browser()
df <- df[df$year == x,]
if (climField == 'ATA') {
df$ATA <- (df$MAT - MAT$normalMAT) * 1000
}
df_coords <- cbind(df$Longitude, df$Latitude)
df_pts <- SpatialPointsDataFrame(coords = df_coords, data = data.frame(df))
crs(df_pts) <- "+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
df_pts <- spTransform(df_pts, CRSobj = crs(ras))
myExtent <- extent(df_pts)
tempGrid <- raster(crs = crs(df_pts), ext = extent(df_pts), res = res(ras))
outRas <- rasterize(df_pts, ras, field = climField, filename = file.path(dPath,paste0(climField, x, ".tif")),
overwrite = TRUE, datatype = "INT2U")
return(outRas)
}
outATA <- lapply(sort(unique(climData$year)), makeRas, df = climData, ras = origRaster, climField = "ATA")
x <- 2050
rgeos::writeOGR(df_pts, "C:/Ian/PracticeDirectory", "MAT2050", "ESRI Shapefile")
rgdal::writeOGR(df_pts, "C:/Ian/PracticeDirectory", "MAT2050", "ESRI Shapefile")
outCMD <- lapply(sort(unique(climData$year)), makeRas, df = climData, ras = origRaster, climField = "CMD")
makeRas <- function(x, df, ras, climField, MAT = meanMAT){
df <- df[df$year == x,]
if (climField == 'ATA') {
df$ATA <- (df$MAT - MAT$normalMAT) * 1000
}
df_coords <- cbind(df$Longitude, df$Latitude)
df_pts <- SpatialPointsDataFrame(coords = df_coords, data = data.frame(df))
crs(df_pts) <- "+init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
df_pts <- spTransform(df_pts, CRSobj = crs(ras))
myExtent <- extent(df_pts)
tempGrid <- raster(crs = crs(df_pts), ext = extent(df_pts), res = res(ras))
outRas <- rasterize(df_pts, ras, field = climField, filename = file.path(dPath,paste0(climField, x, ".tif")),
overwrite = TRUE, datatype = "INT2U")
return(outRas)
}
meaMAT[[2]]
outMAT[[2]]
#Write these stacks, host on Google Drive.
outCMD <- raster::stack(outMAT)
writeRaster(outCMD, filename = "C:/Ian/Data/ClimateNA/CanadaWide/CanCMD_2010-2011.grd", format = "raster")
writeRaster(outATA, filename = "C:/Ian/Data/ClimateNA/CanadaWide/CanATA_2010-2011.grd", format = "raster")
outATA[[2]]
outATA <- raster::stack(outATA)
writeRaster(outATA, filename = "C:/Ian/Data/ClimateNA/CanadaWide/CanATA_2010-2011.grd", format = "raster")
temp <- raster("C:/Ian/CanATA_2010-2011.gri")
temp <- stack("C:/Ian/CanATA_2010-2011.gri")
temp <- stack("C:/Ian/CanATA_2010-2011.gri")
rm(temp)
temp <- stack("C:/Ian/Data/ClimateNA/CanadaWide/CanATA_2011-2100.grd")
temp[1]
temp[, 1]
install.packages("igraph")
setwd("C:/Ian/Git")
library(roxygen2)
library(devtools)
create("LandR.CS")
setwd("./LandR.CS")
getwd()
document()
devtools::document
devtools::document()
devtools::document()
devtools::document()
warnings()
devtools::document()
warnings()
devtools::document()
devtools::document()
roxygen::roxygeniz()
roxygen2::roxygeniz()
roxygen2::roxygenize()
devtools::build()
devtools::install()
devtools::document()
devtools::document()
devtools::document()
devtools::build()
devtools::build(pkg = "C:/Ian/Git/LandR.CS")
devtools::check(args = "--as-cran")
devtools::check(args = "--as-cran")
devtools::check(args = "--as-cran")
devtools::check(args = "--as-cran")
devtools::check(args = "--as-cran")
devtools::document()
?
.
